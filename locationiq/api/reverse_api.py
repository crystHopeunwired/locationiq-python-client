# coding: utf-8

"""
    LocationIQ

    LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.  # noqa: E501

    OpenAPI spec version: 1.0.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from locationiq.api_client import ApiClient


class ReverseApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def reverse(self, lat, lon, format, normalizecity, **kwargs):  # noqa: E501
        """Reverse Geocoding  # noqa: E501

        Reverse geocoding is the process of converting a coordinate or location (latitude, longitude) to a readable address or place name. This permits the identification of nearby street addresses, places, and/or area subdivisions such as a neighborhood, county, state, or country.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reverse(lat, lon, format, normalizecity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: Latitude of the location to generate an address for. (required)
        :param float lon: Longitude of the location to generate an address for. (required)
        :param str format: Format to geocode. Only JSON supported for SDKs (required)
        :param int normalizecity: Normalizes village to city level data to city (required)
        :param int addressdetails: Include a breakdown of the address into elements. Defaults to 1.
        :param str accept_language: Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language=native
        :param int namedetails: Include a list of alternative names in the results. These may include language variants, references, operator and brand.
        :param int extratags: Include additional information in the result if available, e.g. wikipedia link, opening hours.
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reverse_with_http_info(lat, lon, format, normalizecity, **kwargs)  # noqa: E501
        else:
            (data) = self.reverse_with_http_info(lat, lon, format, normalizecity, **kwargs)  # noqa: E501
            return data

    def reverse_with_http_info(self, lat, lon, format, normalizecity, **kwargs):  # noqa: E501
        """Reverse Geocoding  # noqa: E501

        Reverse geocoding is the process of converting a coordinate or location (latitude, longitude) to a readable address or place name. This permits the identification of nearby street addresses, places, and/or area subdivisions such as a neighborhood, county, state, or country.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reverse_with_http_info(lat, lon, format, normalizecity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: Latitude of the location to generate an address for. (required)
        :param float lon: Longitude of the location to generate an address for. (required)
        :param str format: Format to geocode. Only JSON supported for SDKs (required)
        :param int normalizecity: Normalizes village to city level data to city (required)
        :param int addressdetails: Include a breakdown of the address into elements. Defaults to 1.
        :param str accept_language: Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language=native
        :param int namedetails: Include a list of alternative names in the results. These may include language variants, references, operator and brand.
        :param int extratags: Include additional information in the result if available, e.g. wikipedia link, opening hours.
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['lat', 'lon', 'format', 'normalizecity', 'addressdetails', 'accept_language', 'namedetails', 'extratags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reverse" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'lat' is set
        if ('lat' not in local_var_params or
                local_var_params['lat'] is None):
            raise ValueError("Missing the required parameter `lat` when calling `reverse`")  # noqa: E501
        # verify the required parameter 'lon' is set
        if ('lon' not in local_var_params or
                local_var_params['lon'] is None):
            raise ValueError("Missing the required parameter `lon` when calling `reverse`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in local_var_params or
                local_var_params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `reverse`")  # noqa: E501
        # verify the required parameter 'normalizecity' is set
        if ('normalizecity' not in local_var_params or
                local_var_params['normalizecity'] is None):
            raise ValueError("Missing the required parameter `normalizecity` when calling `reverse`")  # noqa: E501

        if 'lat' in local_var_params and local_var_params['lat'] > 90:  # noqa: E501
            raise ValueError("Invalid value for parameter `lat` when calling `reverse`, must be a value less than or equal to `90`")  # noqa: E501
        if 'lat' in local_var_params and local_var_params['lat'] < -90:  # noqa: E501
            raise ValueError("Invalid value for parameter `lat` when calling `reverse`, must be a value greater than or equal to `-90`")  # noqa: E501
        if 'lon' in local_var_params and local_var_params['lon'] > 180:  # noqa: E501
            raise ValueError("Invalid value for parameter `lon` when calling `reverse`, must be a value less than or equal to `180`")  # noqa: E501
        if 'lon' in local_var_params and local_var_params['lon'] < -180:  # noqa: E501
            raise ValueError("Invalid value for parameter `lon` when calling `reverse`, must be a value greater than or equal to `-180`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lat' in local_var_params:
            query_params.append(('lat', local_var_params['lat']))  # noqa: E501
        if 'lon' in local_var_params:
            query_params.append(('lon', local_var_params['lon']))  # noqa: E501
        if 'format' in local_var_params:
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'normalizecity' in local_var_params:
            query_params.append(('normalizecity', local_var_params['normalizecity']))  # noqa: E501
        if 'addressdetails' in local_var_params:
            query_params.append(('addressdetails', local_var_params['addressdetails']))  # noqa: E501
        if 'accept_language' in local_var_params:
            query_params.append(('accept-language', local_var_params['accept_language']))  # noqa: E501
        if 'namedetails' in local_var_params:
            query_params.append(('namedetails', local_var_params['namedetails']))  # noqa: E501
        if 'extratags' in local_var_params:
            query_params.append(('extratags', local_var_params['extratags']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/reverse.php', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Location',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
